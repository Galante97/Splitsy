{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar isIos = Platform.OS === \"ios\";\nfunction ScreenWithoutScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.fixed;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return _jsxs(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"],\n    children: [_jsx(StatusBar, {\n      barStyle: props.statusBar || \"light-content\"\n    }), _jsx(View, {\n      style: [preset.inner, style, insetStyle],\n      children: props.children\n    })]\n  });\n}\nfunction ScreenWithScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.scroll;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  var _Dimensions$get = Dimensions.get(\"window\"),\n    height = _Dimensions$get.height;\n  var scrollViewHeight = React.useRef(null);\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    scrollEnabled = _React$useState2[0],\n    setScrollEnabled = _React$useState2[1];\n  var updateScrollState = function updateScrollState() {\n    if (props.preset === \"auto\") {\n      var contentFitsScreen = scrollViewHeight.current < height * presets.auto.offset.percent - presets.auto.offset.point;\n      if (scrollEnabled && contentFitsScreen) setScrollEnabled(false);\n      if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true);\n    } else if (!scrollEnabled) {\n      setScrollEnabled(true);\n    }\n  };\n  var onContentSizeChange = function onContentSizeChange(contentWidth, contentHeight) {\n    scrollViewHeight.current = contentHeight;\n    updateScrollState();\n  };\n  if (scrollViewHeight.current !== null) updateScrollState();\n  return _jsxs(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"],\n    children: [_jsx(StatusBar, {\n      barStyle: props.statusBar || \"light-content\"\n    }), _jsx(View, {\n      style: [preset.outer, backgroundStyle, insetStyle],\n      children: _jsx(ScrollView, {\n        style: [preset.outer, backgroundStyle],\n        contentContainerStyle: [preset.inner, style],\n        keyboardShouldPersistTaps: props.keyboardShouldPersistTaps || \"handled\",\n        onContentSizeChange: props.preset === \"auto\" ? onContentSizeChange : undefined,\n        scrollEnabled: scrollEnabled,\n        children: props.children\n      })\n    })]\n  });\n}\nexport function Screen(props) {\n  if (isNonScrolling(props.preset)) {\n    return _jsx(ScreenWithoutScrolling, _objectSpread({}, props));\n  } else {\n    return _jsx(ScreenWithScrolling, _objectSpread({}, props));\n  }\n}","map":{"version":3,"names":["React","useSafeAreaInsets","isNonScrolling","offsets","presets","isIos","Platform","OS","ScreenWithoutScrolling","props","insets","preset","fixed","style","backgroundStyle","backgroundColor","insetStyle","paddingTop","unsafe","top","outer","undefined","keyboardOffset","statusBar","inner","children","ScreenWithScrolling","scroll","Dimensions","get","height","scrollViewHeight","useRef","useState","scrollEnabled","setScrollEnabled","updateScrollState","contentFitsScreen","current","auto","offset","percent","point","onContentSizeChange","contentWidth","contentHeight","keyboardShouldPersistTaps","Screen"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/components/screen/screen.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StatusBar,\n  View,\n  Dimensions,\n} from \"react-native\"\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\"\nimport { ScreenProps } from \"./screen.props\"\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\"\n\nconst isIos = Platform.OS === \"ios\"\n\nfunction ScreenWithoutScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.fixed\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.inner, style, insetStyle]}>{props.children}</View>\n    </KeyboardAvoidingView>\n  )\n}\n\nfunction ScreenWithScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.scroll\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  // The followings for <Screen preset='auto'/>\n  // This will automatically disables scrolling if content fits the screen.\n  const { height } = Dimensions.get(\"window\")\n  const scrollViewHeight = React.useRef(null)\n  const [scrollEnabled, setScrollEnabled] = React.useState(true)\n\n  const updateScrollState = () => {\n    if (props.preset === \"auto\") {\n      // check whether if content fits the screen\n      // then toggle scroll state according to it\n      const contentFitsScreen =\n        scrollViewHeight.current < height * presets.auto.offset.percent - presets.auto.offset.point\n\n      // content is less than the size of the screen, so we can disable scrolling\n      if (scrollEnabled && contentFitsScreen) setScrollEnabled(false)\n\n      // content is greater than the size of the screen, so let's enable scrolling\n      if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true)\n    } else if (!scrollEnabled) {\n      // set back initial value in case it's stucked in a disabled state\n      // i.e. if we've just changed preset from 'auto' to 'scroll'\n      setScrollEnabled(true)\n    }\n  }\n\n  const onContentSizeChange = (contentWidth, contentHeight) => {\n    // update scroll view height\n    scrollViewHeight.current = contentHeight\n\n    // then update scroll state\n    updateScrollState()\n  }\n\n  // update scroll state on every render\n  // when scrollViewHeight isn't null\n  if (scrollViewHeight.current !== null) updateScrollState()\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.outer, backgroundStyle, insetStyle]}>\n        <ScrollView\n          style={[preset.outer, backgroundStyle]}\n          contentContainerStyle={[preset.inner, style]}\n          keyboardShouldPersistTaps={props.keyboardShouldPersistTaps || \"handled\"}\n          onContentSizeChange={props.preset === \"auto\" ? onContentSizeChange : undefined}\n          scrollEnabled={scrollEnabled}\n        >\n          {props.children}\n        </ScrollView>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\n/**\n * The starting component on every screen in the app.\n *\n * @param props The screen props\n */\nexport function Screen(props: ScreenProps) {\n  if (isNonScrolling(props.preset)) {\n    return <ScreenWithoutScrolling {...props} />\n  } else {\n    return <ScreenWithScrolling {...props} />\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}