{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { WelcomeScreen, DemoScreen, DemoListScreen, SignUpScreen } from \"../screens\";\nimport { navigationRef, useBackButtonHandler } from \"./navigation-utilities\";\nimport { UserProfileScreen } from \"../screens/UserProfile/UserProfileScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nvar AppStack = function AppStack() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    initialRouteName: \"welcome\",\n    children: [_jsx(Stack.Screen, {\n      name: \"welcome\",\n      component: WelcomeScreen\n    }), _jsx(Stack.Screen, {\n      name: \"demo\",\n      component: DemoScreen\n    }), _jsx(Stack.Screen, {\n      name: \"demoList\",\n      component: DemoListScreen\n    }), _jsx(Stack.Screen, {\n      name: \"signUp\",\n      component: SignUpScreen\n    }), _jsx(Stack.Screen, {\n      name: \"UserProfile\",\n      component: UserProfileScreen\n    })]\n  });\n};\nexport var AppNavigator = function AppNavigator(props) {\n  var colorScheme = useColorScheme();\n  useBackButtonHandler(canExit);\n  return _jsx(NavigationContainer, _objectSpread(_objectSpread({\n    ref: navigationRef,\n    theme: colorScheme === \"dark\" ? DarkTheme : DefaultTheme\n  }, props), {}, {\n    children: _jsx(AppStack, {})\n  }));\n};\nAppNavigator.displayName = \"AppNavigator\";\nvar exitRoutes = [\"welcome\"];\nexport var canExit = function canExit(routeName) {\n  return exitRoutes.includes(routeName);\n};","map":{"version":3,"names":["React","NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","WelcomeScreen","DemoScreen","DemoListScreen","SignUpScreen","navigationRef","useBackButtonHandler","UserProfileScreen","Stack","AppStack","headerShown","AppNavigator","props","colorScheme","useColorScheme","canExit","displayName","exitRoutes","routeName","includes"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/navigators/app-navigator.tsx"],"sourcesContent":["/**\n * The app navigator (formerly \"AppNavigator\" and \"MainNavigator\") is used for the primary\n * navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow which the user will use once logged in.\n */\nimport React from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\"\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\nimport { WelcomeScreen, DemoScreen, DemoListScreen, SignUpScreen } from \"../screens\"\nimport { navigationRef, useBackButtonHandler } from \"./navigation-utilities\"\nimport { UserProfileScreen } from \"../screens/UserProfile/UserProfileScreen\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type NavigatorParamList = {\n  welcome: undefined\n  demo: undefined\n  demoList: undefined\n  signUp: undefined\n  UserProfile: undefined\n  // ðŸ”¥ Your screens go here\n}\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createNativeStackNavigator<NavigatorParamList>()\n\nconst AppStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n      initialRouteName=\"welcome\"\n    >\n      <Stack.Screen name=\"welcome\" component={WelcomeScreen} />\n      <Stack.Screen name=\"demo\" component={DemoScreen} />\n      <Stack.Screen name=\"demoList\" component={DemoListScreen} />\n      <Stack.Screen name=\"signUp\" component={SignUpScreen} />\n      <Stack.Screen name=\"UserProfile\" component={UserProfileScreen} />\n      {/** ðŸ”¥ Your screens go here */}\n    </Stack.Navigator>\n  )\n}\n\ninterface NavigationProps extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport const AppNavigator = (props: NavigationProps) => {\n  const colorScheme = useColorScheme()\n  useBackButtonHandler(canExit)\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      {...props}\n    >\n      <AppStack />\n    </NavigationContainer>\n  )\n}\n\nAppNavigator.displayName = \"AppNavigator\"\n\n/**\n * A list of routes from which we're allowed to leave the app when\n * the user presses the back button on Android.\n *\n * Anything not on this list will be a standard `back` action in\n * react-navigation.\n *\n * `canExit` is used in ./app/app.tsx in the `useBackButtonHandler` hook.\n */\nconst exitRoutes = [\"welcome\"]\nexport const canExit = (routeName: string) => exitRoutes.includes(routeName)\n"],"mappings":";;;AAMA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,SAASC,mBAAmB,EAAEC,YAAY,EAAEC,SAAS,QAAQ,0BAA0B;AACvF,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,SAASC,aAAa,EAAEC,UAAU,EAAEC,cAAc,EAAEC,YAAY;AAChE,SAASC,aAAa,EAAEC,oBAAoB;AAC5C,SAASC,iBAAiB;AAAkD;AAAA;AAwB5E,IAAMC,KAAK,GAAGR,0BAA0B,EAAsB;AAE9D,IAAMS,QAAQ,GAAG,SAAXA,QAAQ,GAAS;EACrB,OACE,MAAC,KAAK,CAAC,SAAS;IACd,aAAa,EAAE;MACbC,WAAW,EAAE;IACf,CAAE;IACF,gBAAgB,EAAC,SAAS;IAAA,WAE1B,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,SAAS;MAAC,SAAS,EAAET;IAAc,EAAG,EACzD,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,MAAM;MAAC,SAAS,EAAEC;IAAW,EAAG,EACnD,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,UAAU;MAAC,SAAS,EAAEC;IAAe,EAAG,EAC3D,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAEC;IAAa,EAAG,EACvD,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,aAAa;MAAC,SAAS,EAAEG;IAAkB,EAAG;EAAA,EAEjD;AAEtB,CAAC;AAID,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAsB,EAAK;EACtD,IAAMC,WAAW,GAAGC,cAAc,EAAE;EACpCR,oBAAoB,CAACS,OAAO,CAAC;EAC7B,OACE,KAAC,mBAAmB;IAClB,GAAG,EAAEV,aAAc;IACnB,KAAK,EAAEQ,WAAW,KAAK,MAAM,GAAGd,SAAS,GAAGD;EAAa,GACrDc,KAAK;IAAA,UAET,KAAC,QAAQ;EAAG,GACQ;AAE1B,CAAC;AAEDD,YAAY,CAACK,WAAW,GAAG,cAAc;AAWzC,IAAMC,UAAU,GAAG,CAAC,SAAS,CAAC;AAC9B,OAAO,IAAMF,OAAO,GAAG,SAAVA,OAAO,CAAIG,SAAiB;EAAA,OAAKD,UAAU,CAACE,QAAQ,CAACD,SAAS,CAAC;AAAA"},"metadata":{},"sourceType":"module"}