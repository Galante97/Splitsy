{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useLayoutEffect, useState } from \"react\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function AutoImage(props) {\n  var _useState = useState({\n      width: 0,\n      height: 0\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    imageSize = _useState2[0],\n    setImageSize = _useState2[1];\n  useLayoutEffect(function () {\n    var _props$source;\n    var mounted = true;\n    if ((_props$source = props.source) != null && _props$source.uri) {\n      RNImage.getSize(props.source.uri, function (width, height) {\n        if (mounted) setImageSize({\n          width: width,\n          height: height\n        });\n      });\n    } else if (Platform.OS === \"web\") {\n      RNImage.getSize(props.source, function (width, height) {\n        if (mounted) setImageSize({\n          width: width,\n          height: height\n        });\n      });\n    } else {\n      var _RNImage$resolveAsset = RNImage.resolveAssetSource(props.source),\n        width = _RNImage$resolveAsset.width,\n        height = _RNImage$resolveAsset.height;\n      setImageSize({\n        width: width,\n        height: height\n      });\n    }\n    return function () {\n      mounted = false;\n    };\n  }, [props.source]);\n  return _jsx(RNImage, _objectSpread(_objectSpread({}, props), {}, {\n    style: [imageSize, props.style]\n  }));\n}","map":{"version":3,"names":["React","useLayoutEffect","useState","AutoImage","props","width","height","imageSize","setImageSize","mounted","source","uri","RNImage","getSize","Platform","OS","resolveAssetSource","style"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/components/auto-image/auto-image.tsx"],"sourcesContent":["import React, { useLayoutEffect, useState } from \"react\"\nimport {\n  Image as RNImage,\n  ImageProps as DefaultImageProps,\n  ImageURISource,\n  Platform,\n} from \"react-native\"\n\ntype ImageProps = DefaultImageProps & {\n  source: ImageURISource\n}\n\n/**\n * An Image wrapper component that autosizes itself to the size of the actual image.\n * You can always override by passing a width and height in the style.\n * If passing only one of width/height this image component will use the actual\n * size of the other dimension.\n *\n * This component isn't required, but is provided as a convenience so that\n * we don't have to remember to explicitly set image sizes on every image instance.\n *\n * To use as a stand-in replacement import { AutoImage as Image } and remove the\n * Image import from react-native. Now all images in that file are handled by this\n * component and are web-ready if not explicitly sized in the style property.\n */\nexport function AutoImage(props: ImageProps) {\n  const [imageSize, setImageSize] = useState({ width: 0, height: 0 })\n\n  useLayoutEffect(() => {\n    let mounted = true\n\n    if (props.source?.uri) {\n      RNImage.getSize(props.source.uri as any, (width, height) => {\n        if (mounted) setImageSize({ width, height })\n      })\n    } else if (Platform.OS === \"web\") {\n      // web requires a different method to get it's size\n      RNImage.getSize(props.source as any, (width, height) => {\n        if (mounted) setImageSize({ width, height })\n      })\n    } else {\n      const { width, height } = RNImage.resolveAssetSource(props.source)\n      setImageSize({ width, height })\n    }\n\n    return () => {\n      mounted = false\n    }\n  }, [props.source])\n\n  return <RNImage {...props} style={[imageSize, props.style]} />\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AAAA;AAAA;AAAA;AAyBxD,OAAO,SAASC,SAAS,CAACC,KAAiB,EAAE;EAC3C,gBAAkCF,QAAQ,CAAC;MAAEG,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC,CAAC;IAAA;IAA5DC,SAAS;IAAEC,YAAY;EAE9BP,eAAe,CAAC,YAAM;IAAA;IACpB,IAAIQ,OAAO,GAAG,IAAI;IAElB,qBAAIL,KAAK,CAACM,MAAM,aAAZ,cAAcC,GAAG,EAAE;MACrBC,OAAO,CAACC,OAAO,CAACT,KAAK,CAACM,MAAM,CAACC,GAAG,EAAS,UAACN,KAAK,EAAEC,MAAM,EAAK;QAC1D,IAAIG,OAAO,EAAED,YAAY,CAAC;UAAEH,KAAK,EAALA,KAAK;UAAEC,MAAM,EAANA;QAAO,CAAC,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIQ,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MAEhCH,OAAO,CAACC,OAAO,CAACT,KAAK,CAACM,MAAM,EAAS,UAACL,KAAK,EAAEC,MAAM,EAAK;QACtD,IAAIG,OAAO,EAAED,YAAY,CAAC;UAAEH,KAAK,EAALA,KAAK;UAAEC,MAAM,EAANA;QAAO,CAAC,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,4BAA0BM,OAAO,CAACI,kBAAkB,CAACZ,KAAK,CAACM,MAAM,CAAC;QAA1DL,KAAK,yBAALA,KAAK;QAAEC,MAAM,yBAANA,MAAM;MACrBE,YAAY,CAAC;QAAEH,KAAK,EAALA,KAAK;QAAEC,MAAM,EAANA;MAAO,CAAC,CAAC;IACjC;IAEA,OAAO,YAAM;MACXG,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACL,KAAK,CAACM,MAAM,CAAC,CAAC;EAElB,OAAO,KAAC,OAAO,kCAAKN,KAAK;IAAE,KAAK,EAAE,CAACG,SAAS,EAAEH,KAAK,CAACa,KAAK;EAAE,GAAG;AAChE"},"metadata":{},"sourceType":"module"}