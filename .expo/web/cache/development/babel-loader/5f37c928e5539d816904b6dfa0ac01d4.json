{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { onSnapshot } from \"mobx-state-tree\";\nimport { RootStoreModel } from \"./root-store\";\nimport { Environment } from \"../environment\";\nimport * as storage from \"../../utils/storage\";\nvar ROOT_STATE_STORAGE_KEY = \"root\";\nexport function createEnvironment() {\n  return _createEnvironment.apply(this, arguments);\n}\nfunction _createEnvironment() {\n  _createEnvironment = _asyncToGenerator(function* () {\n    var env = new Environment();\n    yield env.setup();\n    return env;\n  });\n  return _createEnvironment.apply(this, arguments);\n}\nexport function setupRootStore() {\n  return _setupRootStore.apply(this, arguments);\n}\nfunction _setupRootStore() {\n  _setupRootStore = _asyncToGenerator(function* () {\n    var rootStore;\n    var data;\n    var env = yield createEnvironment();\n    try {\n      data = (yield storage.load(ROOT_STATE_STORAGE_KEY)) || {};\n      rootStore = RootStoreModel.create(data, env);\n    } catch (e) {\n      rootStore = RootStoreModel.create({}, env);\n      __DEV__ && console.tron.error(e.message, null);\n    }\n    if (__DEV__) {\n      env.reactotron.setRootStore(rootStore, data);\n    }\n    onSnapshot(rootStore, function (snapshot) {\n      return storage.save(ROOT_STATE_STORAGE_KEY, snapshot);\n    });\n    return rootStore;\n  });\n  return _setupRootStore.apply(this, arguments);\n}","map":{"version":3,"names":["onSnapshot","RootStoreModel","Environment","storage","ROOT_STATE_STORAGE_KEY","createEnvironment","env","setup","setupRootStore","rootStore","data","load","create","e","__DEV__","console","tron","error","message","reactotron","setRootStore","snapshot","save"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/models/root-store/setup-root-store.ts"],"sourcesContent":["import { onSnapshot } from \"mobx-state-tree\"\nimport { RootStoreModel, RootStore } from \"./root-store\"\nimport { Environment } from \"../environment\"\nimport * as storage from \"../../utils/storage\"\n\n/**\n * The key we'll be saving our state as within async storage.\n */\nconst ROOT_STATE_STORAGE_KEY = \"root\"\n\n/**\n * Setup the environment that all the models will be sharing.\n *\n * The environment includes other functions that will be picked from some\n * of the models that get created later. This is how we loosly couple things\n * like events between models.\n */\nexport async function createEnvironment() {\n  const env = new Environment()\n  await env.setup()\n  return env\n}\n\n/**\n * Setup the root state.\n */\nexport async function setupRootStore() {\n  let rootStore: RootStore\n  let data: any\n\n  // prepare the environment that will be associated with the RootStore.\n  const env = await createEnvironment()\n  try {\n    // load data from storage\n    data = (await storage.load(ROOT_STATE_STORAGE_KEY)) || {}\n    rootStore = RootStoreModel.create(data, env)\n  } catch (e) {\n    // if there's any problems loading, then let's at least fallback to an empty state\n    // instead of crashing.\n    rootStore = RootStoreModel.create({}, env)\n\n    // but please inform us what happened\n    __DEV__ && console.tron.error(e.message, null)\n  }\n\n  // reactotron logging\n  if (__DEV__) {\n    env.reactotron.setRootStore(rootStore, data)\n  }\n\n  // track changes & save to storage\n  onSnapshot(rootStore, (snapshot) => storage.save(ROOT_STATE_STORAGE_KEY, snapshot))\n\n  return rootStore\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,cAAc;AACvB,SAASC,WAAW;AACpB,OAAO,KAAKC,OAAO;AAKnB,IAAMC,sBAAsB,GAAG,MAAM;AASrC,gBAAsBC,iBAAiB;EAAA;AAAA;AAItC;EAAA,uCAJM,aAAmC;IACxC,IAAMC,GAAG,GAAG,IAAIJ,WAAW,EAAE;IAC7B,MAAMI,GAAG,CAACC,KAAK,EAAE;IACjB,OAAOD,GAAG;EACZ,CAAC;EAAA;AAAA;AAKD,gBAAsBE,cAAc;EAAA;AAAA;AA4BnC;EAAA,oCA5BM,aAAgC;IACrC,IAAIC,SAAoB;IACxB,IAAIC,IAAS;IAGb,IAAMJ,GAAG,SAASD,iBAAiB,EAAE;IACrC,IAAI;MAEFK,IAAI,GAAG,OAAOP,OAAO,CAACQ,IAAI,CAACP,sBAAsB,CAAC,KAAK,CAAC,CAAC;MACzDK,SAAS,GAAGR,cAAc,CAACW,MAAM,CAACF,IAAI,EAAEJ,GAAG,CAAC;IAC9C,CAAC,CAAC,OAAOO,CAAC,EAAE;MAGVJ,SAAS,GAAGR,cAAc,CAACW,MAAM,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC;MAG1CQ,OAAO,IAAIC,OAAO,CAACC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAACK,OAAO,EAAE,IAAI,CAAC;IAChD;IAGA,IAAIJ,OAAO,EAAE;MACXR,GAAG,CAACa,UAAU,CAACC,YAAY,CAACX,SAAS,EAAEC,IAAI,CAAC;IAC9C;IAGAV,UAAU,CAACS,SAAS,EAAE,UAACY,QAAQ;MAAA,OAAKlB,OAAO,CAACmB,IAAI,CAAClB,sBAAsB,EAAEiB,QAAQ,CAAC;IAAA,EAAC;IAEnF,OAAOZ,SAAS;EAClB,CAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module"}