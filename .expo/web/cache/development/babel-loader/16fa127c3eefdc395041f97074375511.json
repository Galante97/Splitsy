{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { Tron } from \"./tron\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ArgType } from \"reactotron-core-client\";\nimport { onSnapshot } from \"mobx-state-tree\";\nimport { DEFAULT_REACTOTRON_CONFIG } from \"./reactotron-config\";\nimport { mst } from \"reactotron-mst\";\nimport { clear } from \"../../utils/storage\";\nimport { goBack, resetRoot, navigate } from \"../../navigators/navigation-utilities\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar noop = function noop() {\n  return undefined;\n};\nif (__DEV__) {\n  console.tron = Tron;\n} else {\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop\n  };\n}\nexport var Reactotron = function () {\n  function Reactotron() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_REACTOTRON_CONFIG;\n    _classCallCheck(this, Reactotron);\n    this.config = _objectSpread(_objectSpread({\n      host: \"localhost\",\n      useAsyncStorage: true\n    }, config), {}, {\n      state: _objectSpread({\n        initial: false,\n        snapshots: false\n      }, config && config.state)\n    });\n  }\n  _createClass(Reactotron, [{\n    key: \"setRootStore\",\n    value: function setRootStore(rootStore, initialData) {\n      if (__DEV__) {\n        rootStore = rootStore;\n        this.rootStore = rootStore;\n        var _this$config$state = this.config.state,\n          initial = _this$config$state.initial,\n          snapshots = _this$config$state.snapshots;\n        var name = \"ROOT STORE\";\n        if (initial) {\n          console.tron.display({\n            name: name,\n            value: initialData,\n            preview: \"Initial State\"\n          });\n        }\n        if (snapshots) {\n          onSnapshot(rootStore, function (snapshot) {\n            console.tron.display({\n              name: name,\n              value: snapshot,\n              preview: \"New State\"\n            });\n          });\n        }\n        console.tron.trackMstNode(rootStore);\n      }\n    }\n  }, {\n    key: \"setup\",\n    value: function () {\n      var _setup = _asyncToGenerator(function* () {\n        if (__DEV__) {\n          Tron.configure({\n            name: this.config.name || require(\"../../../package.json\").name,\n            host: this.config.host\n          });\n          if (Platform.OS !== \"web\") {\n            if (this.config.useAsyncStorage) {\n              Tron.setAsyncStorageHandler(AsyncStorage);\n            }\n            Tron.useReactNative({\n              asyncStorage: this.config.useAsyncStorage ? undefined : false\n            });\n          }\n          var RX = /postProcessSnapshot|@APPLY_SNAPSHOT/;\n          Tron.use(mst({\n            filter: function filter(event) {\n              return RX.test(event.name) === false;\n            }\n          }));\n          Tron.connect();\n          Tron.onCustomCommand({\n            title: \"Reset Root Store\",\n            description: \"Resets the MST store\",\n            command: \"resetStore\",\n            handler: function handler() {\n              console.tron.log(\"resetting store\");\n              clear();\n            }\n          });\n          Tron.onCustomCommand({\n            title: \"Reset Navigation State\",\n            description: \"Resets the navigation state\",\n            command: \"resetNavigation\",\n            handler: function handler() {\n              console.tron.log(\"resetting navigation state\");\n              resetRoot({\n                index: 0,\n                routes: []\n              });\n            }\n          });\n          Tron.onCustomCommand({\n            command: \"navigateTo\",\n            handler: function handler(args) {\n              var route = args.route;\n              if (route) {\n                console.log(\"Navigating to: \" + route);\n                navigate(route);\n              } else {\n                console.log(\"Could not navigate. No route provided.\");\n              }\n            },\n            title: \"Navigate To Screen\",\n            description: \"Navigates to a screen by name.\",\n            args: [{\n              name: \"route\",\n              type: ArgType.String\n            }]\n          });\n          Tron.onCustomCommand({\n            title: \"Go Back\",\n            description: \"Goes back\",\n            command: \"goBack\",\n            handler: function handler() {\n              console.tron.log(\"Going back\");\n              goBack();\n            }\n          });\n          if (this.config.clearOnLoad) {\n            Tron.clear();\n          }\n        }\n      });\n      function setup() {\n        return _setup.apply(this, arguments);\n      }\n      return setup;\n    }()\n  }]);\n  return Reactotron;\n}();","map":{"version":3,"names":["Tron","AsyncStorage","ArgType","onSnapshot","DEFAULT_REACTOTRON_CONFIG","mst","clear","goBack","resetRoot","navigate","noop","undefined","__DEV__","console","tron","benchmark","close","configure","connect","display","error","image","log","logImportant","onCustomCommand","overlay","reportError","send","startTimer","storybookSwitcher","use","useReactNative","warn","Reactotron","config","host","useAsyncStorage","state","initial","snapshots","rootStore","initialData","name","value","preview","snapshot","trackMstNode","require","Platform","OS","setAsyncStorageHandler","asyncStorage","RX","filter","event","test","title","description","command","handler","index","routes","args","route","type","String","clearOnLoad"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/services/reactotron/reactotron.ts"],"sourcesContent":["import { Tron } from \"./tron\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { ArgType } from \"reactotron-core-client\"\nimport { RootStore } from \"../../models/root-store/root-store\"\nimport { onSnapshot } from \"mobx-state-tree\"\nimport { ReactotronConfig, DEFAULT_REACTOTRON_CONFIG } from \"./reactotron-config\"\nimport { mst } from \"reactotron-mst\"\nimport { clear } from \"../../utils/storage\"\nimport { goBack, resetRoot, navigate } from \"../../navigators/navigation-utilities\"\nimport { Platform } from \"react-native\"\n\n// Teach TypeScript about the bad things we want to do.\ndeclare global {\n  interface Console {\n    /**\n     * Hey, it's Reactotron if we're in dev, and no-ops if we're in prod.\n     */\n    tron: typeof Tron\n  }\n}\n\n/** Do Nothing. */\nconst noop = () => undefined\n\n// in dev, we attach Reactotron, in prod we attach a interface-compatible mock.\nif (__DEV__) {\n  console.tron = Tron // attach reactotron to `console.tron`\n} else {\n  // attach a mock so if things sneaky by our __DEV__ guards, we won't crash.\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop,\n  }\n}\n\n/**\n * You'll probably never use the service like this since we hang the Reactotron\n * instance off of `console.tron`. This is only to be consistent with the other\n * services.\n */\nexport class Reactotron {\n  config: ReactotronConfig\n\n  rootStore: any\n\n  /**\n   * Create the Reactotron service.\n   *\n   * @param config the configuration\n   */\n  constructor(config: ReactotronConfig = DEFAULT_REACTOTRON_CONFIG) {\n    // merge the passed in config with some defaults\n    this.config = {\n      host: \"localhost\",\n      useAsyncStorage: true,\n      ...config,\n      state: {\n        initial: false,\n        snapshots: false,\n        ...(config && config.state),\n      },\n    }\n  }\n\n  /**\n   * Hook into the root store for doing awesome state-related things.\n   *\n   * @param rootStore The root store\n   */\n  setRootStore(rootStore: any, initialData: any) {\n    if (__DEV__) {\n      rootStore = rootStore as RootStore // typescript hack\n      this.rootStore = rootStore\n\n      const { initial, snapshots } = this.config.state\n      const name = \"ROOT STORE\"\n\n      // logging features\n      if (initial) {\n        console.tron.display({ name, value: initialData, preview: \"Initial State\" })\n      }\n      // log state changes?\n      if (snapshots) {\n        onSnapshot(rootStore, (snapshot) => {\n          console.tron.display({ name, value: snapshot, preview: \"New State\" })\n        })\n      }\n\n      console.tron.trackMstNode(rootStore)\n    }\n  }\n\n  /**\n   * Configure reactotron based on the the config settings passed in, then connect if we need to.\n   */\n  async setup() {\n    // only run this in dev... metro bundler will ignore this block: 🎉\n    if (__DEV__) {\n      // configure reactotron\n      Tron.configure({\n        name: this.config.name || require(\"../../../package.json\").name,\n        host: this.config.host,\n      })\n\n      // hookup middleware\n      if (Platform.OS !== \"web\") {\n        if (this.config.useAsyncStorage) {\n          Tron.setAsyncStorageHandler(AsyncStorage)\n        }\n        Tron.useReactNative({\n          asyncStorage: this.config.useAsyncStorage ? undefined : false,\n        })\n      }\n\n      // ignore some chatty `mobx-state-tree` actions\n      const RX = /postProcessSnapshot|@APPLY_SNAPSHOT/\n\n      // hookup mobx-state-tree middleware\n      Tron.use(\n        mst({\n          filter: (event) => RX.test(event.name) === false,\n        }),\n      )\n\n      // connect to the app\n      Tron.connect()\n\n      // Register Custom Commands\n      Tron.onCustomCommand({\n        title: \"Reset Root Store\",\n        description: \"Resets the MST store\",\n        command: \"resetStore\",\n        handler: () => {\n          console.tron.log(\"resetting store\")\n          clear()\n        },\n      })\n\n      Tron.onCustomCommand({\n        title: \"Reset Navigation State\",\n        description: \"Resets the navigation state\",\n        command: \"resetNavigation\",\n        handler: () => {\n          console.tron.log(\"resetting navigation state\")\n          resetRoot({ index: 0, routes: [] })\n        },\n      })\n\n      Tron.onCustomCommand({\n        command: \"navigateTo\",\n        handler: (args) => {\n          const { route } = args\n          if (route) {\n            console.log(`Navigating to: ${route}`)\n            navigate(route)\n          } else {\n            console.log(\"Could not navigate. No route provided.\")\n          }\n        },\n        title: \"Navigate To Screen\",\n        description: \"Navigates to a screen by name.\",\n        args: [\n          {\n            name: \"route\",\n            type: ArgType.String,\n          },\n        ],\n      })\n\n      Tron.onCustomCommand({\n        title: \"Go Back\",\n        description: \"Goes back\",\n        command: \"goBack\",\n        handler: () => {\n          console.tron.log(\"Going back\")\n          goBack()\n        },\n      })\n\n      // clear if we should\n      if (this.config.clearOnLoad) {\n        Tron.clear()\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}