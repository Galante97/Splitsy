{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"./i18n\";\nimport \"./utils/ignore-warnings\";\nimport React, { useState, useEffect } from \"react\";\nimport { SafeAreaProvider, initialWindowMetrics } from \"react-native-safe-area-context\";\nimport { initFonts } from \"./theme/fonts\";\nimport * as storage from \"./utils/storage\";\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\";\nimport { RootStoreProvider, setupRootStore } from \"./models\";\nimport { ToggleStorybook } from \"../storybook/toggle-storybook\";\nimport { ErrorBoundary } from \"./screens/error/error-boundary\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\";\nfunction App() {\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    rootStore = _useState2[0],\n    setRootStore = _useState2[1];\n  var _useNavigationPersist = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY),\n    initialNavigationState = _useNavigationPersist.initialNavigationState,\n    onNavigationStateChange = _useNavigationPersist.onNavigationStateChange,\n    isNavigationStateRestored = _useNavigationPersist.isRestored;\n  useEffect(function () {\n    ;\n    _asyncToGenerator(function* () {\n      yield initFonts();\n      setupRootStore().then(setRootStore);\n    })();\n  }, []);\n  if (!rootStore || !isNavigationStateRestored) return null;\n  return _jsx(ToggleStorybook, {\n    children: _jsx(RootStoreProvider, {\n      value: rootStore,\n      children: _jsx(SafeAreaProvider, {\n        initialMetrics: initialWindowMetrics,\n        children: _jsx(ErrorBoundary, {\n          catchErrors: \"always\",\n          children: _jsx(AppNavigator, {\n            initialState: initialNavigationState,\n            onStateChange: onNavigationStateChange\n          })\n        })\n      })\n    })\n  });\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","SafeAreaProvider","initialWindowMetrics","initFonts","storage","AppNavigator","useNavigationPersistence","RootStoreProvider","setupRootStore","ToggleStorybook","ErrorBoundary","NAVIGATION_PERSISTENCE_KEY","App","undefined","rootStore","setRootStore","initialNavigationState","onNavigationStateChange","isNavigationStateRestored","isRestored","then"],"sources":["/Users/jamesgalante/Desktop/Splitsy/app/app.tsx"],"sourcesContent":["/**\n * Welcome to the main entry point of the app. In this file, we'll\n * be kicking off our app.\n *\n * Most of this file is boilerplate and you shouldn't need to modify\n * it very often. But take some time to look through and understand\n * what is going on here.\n *\n * The app navigation resides in ./app/navigators, so head over there\n * if you're interested in adding screens and navigators.\n */\nimport \"./i18n\"\nimport \"./utils/ignore-warnings\"\nimport React, { useState, useEffect } from \"react\"\nimport { SafeAreaProvider, initialWindowMetrics } from \"react-native-safe-area-context\"\nimport { initFonts } from \"./theme/fonts\" // expo\nimport * as storage from \"./utils/storage\"\nimport { AppNavigator, useNavigationPersistence } from \"./navigators\"\nimport { RootStore, RootStoreProvider, setupRootStore } from \"./models\"\nimport { ToggleStorybook } from \"../storybook/toggle-storybook\"\nimport { ErrorBoundary } from \"./screens/error/error-boundary\"\n\n// This puts screens in a native ViewController or Activity. If you want fully native\n// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:\n// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator\n\nexport const NAVIGATION_PERSISTENCE_KEY = \"NAVIGATION_STATE\"\n\n/**\n * This is the root component of our app.\n */\nfunction App() {\n  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)\n  const {\n    initialNavigationState,\n    onNavigationStateChange,\n    isRestored: isNavigationStateRestored,\n  } = useNavigationPersistence(storage, NAVIGATION_PERSISTENCE_KEY)\n\n  // Kick off initial async loading actions, like loading fonts and RootStore\n  useEffect(() => {\n    ;(async () => {\n      await initFonts() // expo\n      setupRootStore().then(setRootStore)\n    })()\n  }, [])\n\n  // Before we show the app, we have to wait for our state to be ready.\n  // In the meantime, don't render anything. This will be the background\n  // color set in native by rootView's background color.\n  // In iOS: application:didFinishLaunchingWithOptions:\n  // In Android: https://stackoverflow.com/a/45838109/204044\n  // You can replace with your own loading component if you wish.\n  if (!rootStore || !isNavigationStateRestored) return null\n\n  // otherwise, we're ready to render the app\n  return (\n    <ToggleStorybook>\n      <RootStoreProvider value={rootStore}>\n        <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n          <ErrorBoundary catchErrors={\"always\"}>\n            <AppNavigator\n              initialState={initialNavigationState}\n              onStateChange={onNavigationStateChange}\n            />\n          </ErrorBoundary>\n        </SafeAreaProvider>\n      </RootStoreProvider>\n    </ToggleStorybook>\n  )\n}\n\nexport default App\n"],"mappings":";;AAWA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,oBAAoB,QAAQ,gCAAgC;AACvF,SAASC,SAAS;AAClB,OAAO,KAAKC,OAAO;AACnB,SAASC,YAAY,EAAEC,wBAAwB;AAC/C,SAAoBC,iBAAiB,EAAEC,cAAc;AACrD,SAASC,eAAe;AACxB,SAASC,aAAa;AAAwC;AAM9D,OAAO,IAAMC,0BAA0B,GAAG,kBAAkB;AAK5D,SAASC,GAAG,GAAG;EACb,gBAAkCb,QAAQ,CAAwBc,SAAS,CAAC;IAAA;IAArEC,SAAS;IAAEC,YAAY;EAC9B,4BAIIT,wBAAwB,CAACF,OAAO,EAAEO,0BAA0B,CAAC;IAH/DK,sBAAsB,yBAAtBA,sBAAsB;IACtBC,uBAAuB,yBAAvBA,uBAAuB;IACXC,yBAAyB,yBAArCC,UAAU;EAIZnB,SAAS,CAAC,YAAM;IACd;IAAC,kBAAC,aAAY;MACZ,MAAMG,SAAS,EAAE;MACjBK,cAAc,EAAE,CAACY,IAAI,CAACL,YAAY,CAAC;IACrC,CAAC,GAAG;EACN,CAAC,EAAE,EAAE,CAAC;EAQN,IAAI,CAACD,SAAS,IAAI,CAACI,yBAAyB,EAAE,OAAO,IAAI;EAGzD,OACE,KAAC,eAAe;IAAA,UACd,KAAC,iBAAiB;MAAC,KAAK,EAAEJ,SAAU;MAAA,UAClC,KAAC,gBAAgB;QAAC,cAAc,EAAEZ,oBAAqB;QAAA,UACrD,KAAC,aAAa;UAAC,WAAW,EAAE,QAAS;UAAA,UACnC,KAAC,YAAY;YACX,YAAY,EAAEc,sBAAuB;YACrC,aAAa,EAAEC;UAAwB;QACvC;MACY;IACC;EACD,EACJ;AAEtB;AAEA,eAAeL,GAAG"},"metadata":{},"sourceType":"module"}